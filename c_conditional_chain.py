# Here we are building a system in which we will be using a conditional chain which means that we will have some chains and we will be calling any chain on the basis of output of previous invoke
# for example we will give our model some text and will ask him to give us sentiment of this text.And if sentiment is positive then run a specific chain and if negative run other one.
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain_core.prompts import PromptTemplate
from langchain_core.output_parsers import PydanticOutputParser
from dotenv import load_dotenv
from pydantic import BaseModel , Field
from typing import Literal
from langchain.schema.runnable import RunnableBranch,RunnableLambda
import os
load_dotenv()
gemini_api_key = os.getenv("GEMINI_API_KEY")

model = ChatGoogleGenerativeAI(
    model='gemini-2.0-flash-lite',
    google_api_key = gemini_api_key
)

class Feedback(BaseModel):
    sentiment : Literal['positive','negative'] = Field(description="Generate sentiment of given text")
    
parser = PydanticOutputParser(pydantic_object=Feedback)

template1 = PromptTemplate(
    template = """
        Generate sentiment of given {text} \n {format_instructions}
    """,
    input_variables=['text'],
    partial_variables={'format_instructions' : parser.get_format_instructions()}
)

text = "He is a doctor"

chain = template1 | model | parser

# response = chain.invoke({'text':text})
# print(response.sentiment)

# now want to generate some response on the basis of sentiment.IF sentiment is positive print a thanking message which is generated by model else another message if negative.
# So this kind of chain is a conditional chain , and for conditional chain we use RunnableBranch component


template2 = PromptTemplate(
    template="""
        Write an appropriate response to a positive feedback. \n Feedback -> {feedback}
    """,
    input_variables=['feedback']
)
template3 = PromptTemplate(
    template="""
        Write an appropriate response to a negative feedback. \n Feedback -> {feedback}
    """,
    input_variables=['feedback']
)

branch_chain = RunnableBranch(#here we pass multiple tuples and each tuple is like a if statement.In each tuple first we pass condition and then write what to do if given condition satisfies(basically second item is a chain)
                                                     
    (lambda x:x.sentiment=='positive' , template2 | model | parser ),
    (lambda x:x.sentiment=='negative' , template3 | model | parser),
    # for writing code for else statement we have to use RunnableLambda method
    RunnableLambda(lambda x:'Sorry we can"t find any sentiment' )
    
)

chain2 = chain | branch_chain

response = chain2.invoke({'text':text})
print(response)