# Output Parsers in langchain help convert raw LLM responses into structured formates like JSON,CSV,Pydantic models and more.They ensure consistency,validation and ease of use.
# There are many types of Output Parsers in langchain.
# StrOutputParser is the simplest output parser in langchain.it is used to parse the output of a language model and return it as a plain string.We know that reponse returned by model is in the form of an object in which we get main response thorugh content method.eg->response.content
# But if we apply outPutParser then we can get response in plain text form.
# In the following example we will be generating detailed record on a topic and then will be generating summary of this record through same model. 
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain_core.prompts import PromptTemplate
from langchain_core.output_parsers import StrOutputParser
from dotenv import load_dotenv
import os
load_dotenv()
GEMINI_API_KEY=os.getenv('GEMINI_API_KEY')
# print(GEMINI_API_KEY)
model=ChatGoogleGenerativeAI(
    model='gemini-2.0-flash-lite',
    google_api_key=GEMINI_API_KEY
)

# prompt template 1
template1 = PromptTemplate(
    template='Wrtie a detailed report on {topic}',
    input_variables=['topic']
)
topic_name = input("Enter the topic name : ")

# prompt = template1.invoke({'topic':topic_name})
# response1 = model.invoke(prompt)
# print(response1.content)
# prompt template 2
template2 = PromptTemplate(
    template='write a summary of the following text in 5 to 6 lines in very simple words,and don"t tell that i have told you to make summary of this input. : /n {text}',
    input_variables=['text']
)
# prompt2 = template2.invoke({'text':response1.content})
# response2 = model.invoke(prompt2)
# print(response2.content)

# here we see that first we invoke the template1, then model,then again template2 and then model and then from model's response we got reponse through content method.
# but we can do this in a better way using strOutputParser.And we use strOutputParser in chains

parser = StrOutputParser()
chain = template1 | model | parser | template2 | model | parser
response3 = chain.invoke({'topic':topic_name})
print(response3)

# here first of all our chain will invoke template1 and then will invoke model with input returned by the template1,output generated by model will be passed to parser and it will convert it to plain text,then template2 will be invoke with previous output of template2 and finally output generated by model will be parsed by parser into simpel plain text.So in this way we can make our code more clean and concise.